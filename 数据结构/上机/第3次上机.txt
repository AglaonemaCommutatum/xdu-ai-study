1.//P45 第 8 题： 已知 A、 B 和 C 为三个元素值递增有序排列的顺序表，现要求
对表 A 作如下运算：删除那些既在 B 中出现又在 C 中出现的元素。
#include<stdio.h>
#include<malloc.h>
typedef int datatype;
#define maxsize 1024
typedef struct
{
datatype data[maxsize];
int last;
} sequenlist;
sequenlist* create();
void print(sequenlist*);
void Delete(sequenlist*, sequenlist*, sequenlist*);
int main(void)
{
sequenlist*LA, *LB, *LC;
printf("*************please input LA numbers : ***********************\n");
LA = create();
printf("*************please input LB numbers : ***********************\n");
LB = create();
printf("*************please input LC numbers : ***********************\n");
LC = create();
printf("*************删除之前的 LA 表为: ***********************\n");
print(LA);
Delete(LA, LB, LC);
printf("*************删除之后的 LA 表为: ***********************\n");
print(LA);
return 0;
}
//建立顺序表
sequenlist* create()
{
sequenlist* L;
L = (sequenlist*)malloc(sizeof(sequenlist));
L->last = 0;
int ch;
scanf("%d", &ch);
while (ch != -1)
{
L->last++; //从 1 单元开始存放元素
L->data[L->last] = ch;2
scanf("%d", &ch);
}
return L;
}
void Delete(sequenlist *LA, sequenlist *LB, sequenlist *LC)
{
}/*SqList_Delete*/
//输出顺序表
void print(sequenlist*L)
{
for (int i = 1; i <= L->last; i++)
printf("%d\n", L->data[i]);
}



2.//P45 第 8 题：已知 A、 B 和 C 为三个元素值递增有序排列的链表，现要求对
表 A 作如下运算：删除那些既在 B 中出现又在 C 中出现的元素。
#include <stdio.h>
#include<malloc.h>
typedef struct node
{
int data;
struct node *next;
}LinkList;/*定义链表节点的结构*/
LinkList* create();/*函数声明*/
void ListDelete(LinkList * La, LinkList * Lb, LinkList *Lc);
void Print(LinkList *);
int main (void)
{/*功能：建立单链表 A,B,C，并且删除 A 中均在 B 和 C 中出现的数据。 */
LinkList *headA, *headB, *headC;
headA = create();/*建立链表*/
headB = create();
headC = create();
printf("*********************删除之前的 3个表分别为: *********************\n");
Print(headA);/*输出显示链表数据*/
Print(headB);
Print(headC);
ListDelete(headA, headB, headC);/*删除 A 中满足条件的节点*/
printf("********************删除之后的 LA 表为: ***********************\n");
Print(headA);
return 0;
}
void ListDelete(LinkList *La, LinkList *Lb, LinkList *Lc)
{/*功能：删除 A 中的有关结点*/
}





3.//P74 第 4 题：利用栈的基本运算将栈 S 中值为 m 的元素全部删除。
#include<stdio.h>
#include<malloc.h>
#define maxsize 1024
typedef char datatype;
typedef struct stack
{
datatype data[maxsize];
int Top;
} seqstack;
seqstack * Initstack();
void Delete(seqstack *, datatype);
void Push(seqstack *, datatype);
datatype Pop(seqstack *);
int EmptyS(seqstack *s);
void Print(seqstack * s);
int main (void)
{
seqstack *s;
datatype m;
printf("***********************请输入 m: ***********************\n");
scanf("%c", &m);
printf("***********************请初始化栈 s: ***********************\n");
s = Initstack();
printf("***********************输出栈 s: ***********************\n");
Print(s);
Delete(s, m);//调用删除函数
printf("\n******************** 输 出 删 除 m 之 后 的 栈 s:
***********************\n");
Print(s);
return 0;
}
void Delete(seqstack *s,datatype m)
{ }5
seqstack* Initstack ( )
{ }
void Push(seqstack *s, datatype e)
{ }
int EmptyS(seqstack *s)
{ }
datatype Pop(seqstack *s)
{ }
void Print(seqstack*s)
{ }6




4. //改进的模式匹配追踪算法（KMP）测试
以类似下图的形式展示结果：
测试用例 1：
输入:
目标串: abcababcabc
模式串: abcabc
输出:
匹配成功！ 比较次数为： 13
返回第一次匹配成功的位置(首字母位序)： 5
*********next 数组内容： -1,0,0,0,1,2
测试用例 2：
输入:
目标串: abcababcabckka
模式串: abcabc
输出:
匹配成功！ 比较次数为： 13
返回第一次匹配成功的位置(首字母位序)： 5
*********next 数组内容： -1,0,0,0,1,2
测试用例 3：
输入:
目标串: abcababcabckka
模式串: abcabd
输出:
匹配失败！ 比较次数为： 20
*********next 数组内容： -1,0,0,0,1,27
测试用例 4：
输入:
目标串: aaaaaaaaaaaaaaaaaaakuu
模式串: aaaaak
输出:
匹配成功！ 比较次数为： 34
返回第一次匹配成功的位置(首字母位序)： 14
*********next 数组内容： -1,0,1,2,3,4
测试用例 5：
输入:
目标串: aaaaaaaaaaaaaaaaaaak
模式串: aaaaau
输出:
匹配失败！ 比较次数为： 40
*********next 数组内容： -1,0,1,2,3,48



5. P94 第 6 题 ：利用 C 的库函数 strlen、 strcpy 和 strncpy 写一算法 void
StrDelete(char*S,int i,int m)，删去串 S 中从位置 i 开始的连续 m 个字符。若
i≥strlen(S)，则没有字符被删除；若 i+m≥strlen(S)，则将 S 中从位置 i 开始直至
末尾的字符均删去。
#include "stdafx.h"
#include<stdio.h>
#include<string.h>
#include<malloc.h>
//顺序串的结构类型定义
#define maxsize 100
typedef struct
{
char str[maxsize];
int len;
}seqstring;
void strPut(seqstring*);
void strDelete(seqstring*,int,int);
int main(void)
{
seqstring*S;
int i,m;
S=(seqstring*)malloc(sizeof(seqstring));
printf("*********************请输入字符串*********************： ");
gets(S->str);
S->len=strlen(S->str);
printf("*********************输入的字符串显示如下*********************);
strPut(S);
printf("****************输入字符串的长度为： %d \n", S->len);
printf("********************* 请 输 入 删 除 字 符 的 开 始 位 置 :
********************\n");
scanf("%d",&i);
printf("\n********************* 请 输 入 要 删 除 的 字 符 个 数
*********************\n");
scanf("%d",&m);
strDelete(S,i,m);
printf("*****************删除子串后的字符串为*****************\n");
strPut(S);
return 0;
}9
测试用例参考：（ 13 个字符为例）
输入字符串： abdeuyqwxzkjk
删除的开始位置： 9
删除的字符个数： 2
删除子串后的字符串: abdeuyqwkjk
测试用例参考：（ 13 个字符为例）
输入字符串： abdeuyqwxzkjk
删除的开始位置： 9
删除的字符个数： 8
删除子串后的字符串: abdeuyqw10



6. //交换左右子树的递归算法实现（二叉树翻转）
题目要求： 已知二叉树采用二叉链表存储结构，编写一个算法交换二叉树所有左、右子树的
位置，即结点的左子树变为结点的右子树，右子树变为左子树。
#include "stdafx.h"
#include<stdio.h>
#include<malloc.h>
//二叉链表的结构类型定义
const int maxsize=1024;
typedef char datatype;
typedef struct node
{
datatype data;
struct node *lchild,*rchild;
}bitree;
bitree*creattree();
void preorder(bitree*);
void inorder(bitree *);
void swap(bitree*);
int main(void)
{
bitree*pb;
printf("**********按层次输入二叉树，虚结点输入'@'，以'#'结束输入********\n");
pb=creattree();
printf("******************交换之前的原二叉树先序遍历序列为： ");
preorder(pb);
printf("\n");
printf("******************交换之前的原二叉树中序遍历序列为： ");
inorder(pb);
printf("\n");
pb=swap(pb);
printf("******************交换之后的二叉树先序遍历序列为： ");
preorder(pb);
printf("\n");
printf("******************交换之后的二叉树中序遍历序列为： ");
inorder(pb);
printf("\n");
return 0;
}11
假设构造的二叉树如图所示：
A
B
C
D E
F
H
I
G
交换左右子树后的二叉树如图所示：
输出如下结果：
交换之前的原二叉树先序遍历序列为： A B C D E F H I G
交换之前的原二叉树中序遍历序列为： D C E B A F H G I
交换之后的二叉树先序遍历序列为： A F H I G B C E D
交换之后的二叉树先序遍历序列为： I G H F A B E C D12





7. 以中序遍历为基础，写出在二叉树上查找指定结点 x 的中序前驱结点的算法。
例如二叉树如图所示：
测试用例 1：
输入：待查找结点为 A
输出：结点 A 的中序前驱结点为 E
测试用例 2：
输入：待查找结点为 C
输出：结点 C 的中序前驱结点为 H
测试用例 3：
输入：待查找结点为 D
输出：结点 D 没有中序前驱结点
测试用例 4：
输入：待查找结点为 E
输出：结点 E 的中序前驱结点为 G
测试用例 5：
输入：待查找结点为 G
输出：结点 G 的中序前驱结点为 B
其它可选测试用例：
输入：待查找结点为 B
输出：结点 B 的中序前驱结点为 D
输入：待查找结点为 F
输出：结点 F 的中序前驱结点为 A
输入：待查找结点为 H
输出：结点 H 的中序前驱结点为 F13
以中序遍历为基础，写出在二叉树上查找指定结点 x 的中序后继结点的算法。
例如二叉树如图所示：
测试用例 1：
输入：待查找结点为 A
输出：结点 A 的中序后继结点为 F
测试用例 2：
输入：待查找结点为 B
输出：结点 B 的中序后继结点为 G
测试用例 3：
输入：待查找结点为 G
输出：结点 G 的中序后继结点为 E
测试用例 4：
输入：待查找结点为 E
输出：结点 E 的中序后继结点为 A
测试用例 5：
输入：待查找结点为 C
输出：结点 C 没有中序后继结点
其它可选测试用例：
输入：待查找结点为 D
输出：结点 D 的中序后继结点为 B
输入：待查找结点为 F
输出：结点 F 的中序后继结点为 H
输入：待查找结点为 H
输出：结点 H 的中序后继结点为 C14




9. n 阶魔方阵（n 为奇数）的构造算法测试
要求可以从键盘灵活输入 n=3,5,7,9……
输入 n=3 时，输出魔方阵：
𝟔𝟔 𝟏𝟏 𝟖𝟖
𝟕𝟕 𝟓𝟓 𝟑𝟑
𝟐𝟐 𝟗𝟗 𝟒𝟒
输入 n=5 时，输出魔方阵：
𝟏𝟏𝟓𝟓 𝟖𝟖
𝟏𝟏𝟔𝟔 𝟏𝟏𝟒𝟒
𝟐𝟐𝟐𝟐 𝟐𝟐𝟐𝟐
𝟏𝟏 𝟕𝟕 𝟏𝟏𝟑𝟑
𝟐𝟐𝟒𝟒 𝟏𝟏𝟕𝟕
𝟓𝟓 𝟐𝟐𝟑𝟑
𝟔𝟔 𝟒𝟒
𝟐𝟐 𝟐𝟐𝟏𝟏 𝟏𝟏𝟗𝟗 𝟏𝟏𝟐𝟐 𝟏𝟏𝟐𝟐
𝟗𝟗 𝟐𝟐 𝟐𝟐𝟓𝟓 𝟏𝟏𝟖𝟖 𝟏